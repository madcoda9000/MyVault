@page "/login"
@inject AuthService AuthService
@inject IBlazoredTokenStore TokenStore
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
    </div>
    <div class="mb-2">
        <label for="password">Password:</label>
        <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger mt-2">@errorMessage</p>
    }
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;
        var apiResult = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

        if (apiResult != null && apiResult.Success && apiResult.Data is { } data)
        {
            await TokenStore.SetTokensAsync(data.access_token, data.refresh_token);

            var accessToken = await TokenStore.GetAccessTokenAsync();
            if (AuthStateProvider is JwtAuthenticationStateProvider jwtProvider && !string.IsNullOrEmpty(accessToken))
            {
                jwtProvider.NotifyUserAuthentication(accessToken);
            }
            Navigation.NavigateTo("/", true);
        }
        else
        {
            errorMessage = apiResult?.Message ?? "Login fehlgeschlagen.";
        }
    }
}
