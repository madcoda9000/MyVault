// <auto-generated />
using System;
using MyVault.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable
#pragma warning disable CS1591 // Disable warning: "Missing XML comment for publicly visible type or member"

namespace MyVault.Server.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230811145535_Initial_MySql")]
    partial class Initial_MySql
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyVaultModels.DataModels.ApplicationSettings", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Name", "Type");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Name = "SessionTimeoutWarnAfter",
                            Type = "GlobalSettings",
                            Value = "5"
                        },
                        new
                        {
                            Name = "SessionTimeoutRedirAfter",
                            Type = "GlobalSettings",
                            Value = "60"
                        },
                        new
                        {
                            Name = "SessionCookieExpiration",
                            Type = "GlobalSettings",
                            Value = "10"
                        },
                        new
                        {
                            Name = "ShowMfaEnableBanner",
                            Type = "GlobalSettings",
                            Value = "true"
                        },
                        new
                        {
                            Name = "AllowSelfRegister",
                            Type = "GlobalSettings",
                            Value = "true"
                        },
                        new
                        {
                            Name = "AllowSelfPwReset",
                            Type = "GlobalSettings",
                            Value = "true"
                        },
                        new
                        {
                            Name = "SmtpUsername",
                            Type = "MailSettings",
                            Value = "YOUR_Smtp_Username"
                        },
                        new
                        {
                            Name = "SmtpPassword",
                            Type = "MailSettings",
                            Value = "YOUR_SmtpPassword"
                        },
                        new
                        {
                            Name = "SmtpServer",
                            Type = "MailSettings",
                            Value = "YOUR_SmtpServer"
                        },
                        new
                        {
                            Name = "SmtpPort",
                            Type = "MailSettings",
                            Value = "587"
                        },
                        new
                        {
                            Name = "SmtpUseTls",
                            Type = "MailSettings",
                            Value = "true"
                        },
                        new
                        {
                            Name = "SmtpFromAddress",
                            Type = "MailSettings",
                            Value = "YOUR_From_Address"
                        },
                        new
                        {
                            Name = "LdapDomainController",
                            Type = "LdapSettings",
                            Value = "YOUR_Domaincontroller_FQDN"
                        },
                        new
                        {
                            Name = "LdapDomainName",
                            Type = "LdapSettings",
                            Value = "YOUR_Domainname"
                        },
                        new
                        {
                            Name = "LdapBaseDn",
                            Type = "LdapSettings",
                            Value = "DC=YOUR,DC=Domain,DC=com"
                        },
                        new
                        {
                            Name = "LdapGroup",
                            Type = "LdapSettings",
                            Value = "YOUR_Ldap_Group"
                        },
                        new
                        {
                            Name = "LdapEnabled",
                            Type = "LdapSettings",
                            Value = "false"
                        },
                        new
                        {
                            Name = "ApplicationName",
                            Type = "BrandSettings",
                            Value = "GroupVault"
                        },
                        new
                        {
                            Name = "ColorPrimary",
                            Type = "BrandSettings",
                            Value = "#595959"
                        },
                        new
                        {
                            Name = "ColorSecondary",
                            Type = "BrandSettings",
                            Value = "#85bc2c"
                        },
                        new
                        {
                            Name = "ColorInfo",
                            Type = "BrandSettings",
                            Value = "#3a94e8"
                        },
                        new
                        {
                            Name = "ColorSuccess",
                            Type = "BrandSettings",
                            Value = "#a9c47e"
                        },
                        new
                        {
                            Name = "ColorWarning",
                            Type = "BrandSettings",
                            Value = "#f5d33d"
                        },
                        new
                        {
                            Name = "ColorDanger",
                            Type = "BrandSettings",
                            Value = "#d62b2b"
                        },
                        new
                        {
                            Name = "ColorLightBackground",
                            Type = "BrandSettings",
                            Value = "#EDEDED"
                        },
                        new
                        {
                            Name = "ColorLink",
                            Type = "BrandSettings",
                            Value = "#85bc2c"
                        },
                        new
                        {
                            Name = "ColorHeadlines",
                            Type = "BrandSettings",
                            Value = "#595959"
                        },
                        new
                        {
                            Name = "ColorTextMuted",
                            Type = "BrandSettings",
                            Value = "#9ca0a5"
                        },
                        new
                        {
                            Name = "HeadBarBackground",
                            Type = "BrandSettings",
                            Value = "#595959"
                        },
                        new
                        {
                            Name = "HeadBarTextColor",
                            Type = "BrandSettings",
                            Value = "#ffffff"
                        },
                        new
                        {
                            Name = "SideBarBackground",
                            Type = "BrandSettings",
                            Value = "#FFFFFF"
                        },
                        new
                        {
                            Name = "ApplicationLogo",
                            Type = "BrandSettings",
                            Value = ""
                        },
                        new
                        {
                            Name = "LoginBackground",
                            Type = "BrandSettings",
                            Value = "#595959"
                        },
                        new
                        {
                            Name = "EnableCarbonStyle",
                            Type = "BrandSettings",
                            Value = "true"
                        },
                        new
                        {
                            Name = "SendNotifOnObjectUpdate",
                            Type = "NotificationSettings",
                            Value = "false"
                        },
                        new
                        {
                            Name = "SendNotifOnObjectCreation",
                            Type = "NotificationSettings",
                            Value = "false"
                        },
                        new
                        {
                            Name = "SendNotifOnObjectDeletion",
                            Type = "NotificationSettings",
                            Value = "false"
                        },
                        new
                        {
                            Name = "SendNotifOnUserSelfRegister",
                            Type = "NotificationSettings",
                            Value = "false"
                        },
                        new
                        {
                            Name = "SendWelcomeMailOnUserCreation",
                            Type = "NotificationSettings",
                            Value = "false"
                        },
                        new
                        {
                            Name = "NotificationReceiver",
                            Type = "NotificationSettings",
                            Value = "yourmailaddres@yourdomain.com"
                        });
                });

            modelBuilder.Entity("MyVaultModels.DataModels.AppLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("AppLogs");
                });

            modelBuilder.Entity("MyVaultModels.DataModels.EmailJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Finished")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("FinishedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("objectModel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EmailJobs");
                });

            modelBuilder.Entity("MyVaultModels.DataModels.RateLimit", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ClientIP")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RequestPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RetryAfter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("RateLimit");
                });

            modelBuilder.Entity("MyVaultModels.DataModels.Secrets", b =>
                {
                    b.Property<int>("S_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("S_Attachment")
                        .HasColumnType("longblob");

                    b.Property<string>("S_AttachmentFileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_AttachmentMimetype")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("S_CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("S_Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_HostName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("S_ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("S_Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("S_Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_Url_Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_UserRoles")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("S_Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("S_createdBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("S_isPrivate")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("S_Id");

                    b.HasIndex("S_Name", "S_UserRoles", "S_Username");

                    b.ToTable("AppSecrets");
                });

            modelBuilder.Entity("MyVaultModels.DataModels.SecretsHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("S_Attachment")
                        .HasColumnType("longblob");

                    b.Property<string>("S_AttachmentFileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_AttachmentMimetype")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("S_CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("S_Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_HostName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("S_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("S_ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("S_Name")
                        .HasColumnType("longtext");

                    b.Property<string>("S_Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_Url_Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_UserRoles")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("S_createdBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("S_isPrivate")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("AppSecretsHistory");
                });

            modelBuilder.Entity("MyVaultModels.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Department")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailVerifyToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLdapLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMfaForce")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResetToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RolesCombined")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TwoFactorAuthToken")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TwoFactorSecret")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6fbfb682-568c-4f5b-a298-85937ca4f7f3",
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "41032610-7e3e-41fe-ba8a-84dd75041a07",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "",
                            Email = "super.admin@local.app",
                            EmailConfirmed = true,
                            EmailVerifyToken = "",
                            FirstName = "Super",
                            IsEnabled = true,
                            IsLdapLogin = false,
                            IsMfaForce = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPER.ADMIN@LOCAL.APP",
                            NormalizedUserName = "SUPER.ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJPYl8mw7lG3xCfmirAEe0jN2ZH5kchJdGNXDqrYZ0SIoXAnCMk7d1tQd7zW42UArg==",
                            PhoneNumber = "111",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResetToken = "",
                            RolesCombined = "Admin",
                            SecurityStamp = "16b803fd-ed5b-4657-859e-5f77bc7dd97b",
                            TwoFactorEnabled = false,
                            UserName = "super.admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "6fbfb682-568c-4f5b-a298-85937ca4f7f3",
                            RoleId = "dffc6dd5-b145-41e9-a861-c87ff673e9ca"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyVaultModels.Identity.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "dffc6dd5-b145-41e9-a861-c87ff673e9ca",
                            ConcurrencyStamp = "b940e914-159a-482a-8a23-2314fd5c6688",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "f8a527ac-d7f6-4d9d-aca6-46b2261b042b",
                            ConcurrencyStamp = "4d5b89f3-661d-47a4-94e8-2cb17fce13ee",
                            Name = "User",
                            NormalizedName = "USER",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyVaultModels.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyVaultModels.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyVaultModels.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyVaultModels.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618, 1591
        }
    }
}
